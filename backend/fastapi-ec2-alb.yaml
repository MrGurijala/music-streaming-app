AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy FastAPI on EC2 with Application Load Balancer, Auto Scaling, and CloudWatch Alarms

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName

  VpcId:
    Description: VPC ID to deploy resources
    Type: AWS::EC2::VPC::Id

  PublicSubnets:
    Description: List of public subnet IDs for the ALB
    Type: List<AWS::EC2::Subnet::Id>

  DashboardName:
    Type: String
    Default: ALB-Monitoring-Dashboard
    Description: Name of the CloudWatch Dashboard

Resources:
  FastAPISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable port 8000 for FastAPI
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow PostgreSQL access from EC2 FastAPI SG
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref FastAPISecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from internet
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref EC2Role]

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: FastAPILaunchTemplate
      LaunchTemplateData:
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        ImageId: ami-04b2ad6c50c72936b
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        SecurityGroupIds:
          - !Ref FastAPISecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            amazon-linux-extras enable python3.8
            yum install -y python3.8 git amazon-cloudwatch-agent
            cd /home/ec2-user
            git clone -b backend-dev https://github.com/MrGurijala/music-streaming-app.git
            cd music-streaming-app
            python3.8 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install gunicorn
            pip install -r backend/requirements.txt
            mkdir -p /var/log/fastapi
            venv/bin/gunicorn main:app \
              -w 4 \
              -k uvicorn.workers.UvicornWorker \
              --bind 0.0.0.0:8000 \
              --access-logfile /var/log/fastapi/access.log \
              --error-logfile /var/log/fastapi/error.log \
              --timeout 60 --daemon

            # Write CloudWatch Agent config
            cat <<EOF > /opt/aws/amazon-cloudwatch-agent/bin/cloudwatch-config.json
            {
              "metrics": {
                "metrics_collected": {
                  "cpu": {
                    "measurement": ["cpu_usage_idle", "cpu_usage_iowait", "cpu_usage_user"],
                    "metrics_collection_interval": 60
                  },
                  "mem": {
                    "measurement": ["mem_used_percent"]
                  },
                  "disk": {
                    "measurement": ["used_percent"],
                    "resources": ["*"]
                  },
                  "swap": {
                    "measurement": ["swap_used_percent"]
                  }
                }
              }
            }
            EOF

            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config -m ec2 \
              -c file:/opt/aws/amazon-cloudwatch-agent/bin/cloudwatch-config.json -s

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: FastAPI-ASG
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"
      VPCZoneIdentifier: !Ref PublicSubnets
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: EC2
      HealthCheckGracePeriod: 60
      Tags:
        - Key: Name
          Value: FastAPI-ASG-Instance
          PropagateAtLaunch: true

  ScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60.0

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: FastAPI-ALB
      Scheme: internet-facing
      Subnets: !Ref PublicSubnets
      SecurityGroups: [!Ref ALBSecurityGroup]
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: FastAPITargetGroup
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: instance
      HealthCheckPath: /health
      HealthCheckTimeoutSeconds: 10
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  # CloudWatch Alarms
  ScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: FastAPI-ScaleOut-Alarm
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScalingPolicy
      TreatMissingData: missing

  ScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: FastAPI-ScaleIn-Alarm
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 30
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScalingPolicy
      TreatMissingData: missing

  CPUUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: HighCPUUtilization
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 75
      AlarmDescription: Alarm when CPU exceeds 75%
      Dimensions:
        - Name: AutoScalingGroupName
          Value: FastAPI-ASG

  StatusCheckFailedAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: EC2StatusCheckFailed
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: StatusCheckFailed_Instance
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 0
      AlarmDescription: Alarm when instance status check fails
      Dimensions:
        - Name: AutoScalingGroupName
          Value: FastAPI-ASG

  TargetResponseTimeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-HighTargetResponseTime"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Average
      Threshold: 0.2
      AlarmDescription: ALB target response time > 200ms
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
        - Name: LoadBalancer
          Value: !GetAtt ALB.LoadBalancerFullName
      TreatMissingData: notBreaching

  Target5XXErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-Target5XXErrors"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 1
      AlarmDescription: ALB target returned 5XX errors
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
        - Name: LoadBalancer
          Value: !GetAtt ALB.LoadBalancerFullName
      TreatMissingData: notBreaching

  BillingAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: HighEstimatedChargesGBP
      Namespace: AWS/Billing
      MetricName: EstimatedCharges
      Dimensions:
        - Name: Currency
          Value: GBP
      Statistic: Maximum
      Period: 86400
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: Estimated charges exceed Â£2/day

  TargetGroupDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Ref DashboardName
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [["AWS/ApplicationELB", "TargetResponseTime", "TargetGroup", "${TargetGroup.TargetGroupFullName}", "LoadBalancer", "${ALB.LoadBalancerFullName}"]],
                "region": "${AWS::Region}",
                "stat": "Average",
                "title": "Target Response Time (Average)",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [["AWS/ApplicationELB", "TargetResponseTime", "TargetGroup", "${TargetGroup.TargetGroupFullName}", "LoadBalancer", "${ALB.LoadBalancerFullName}" , {"stat": "p99"}]],
                "region": "${AWS::Region}",
                "title": "Target Response Time (P99)",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [["AWS/ApplicationELB", "HTTPCode_Target_5XX_Count", "TargetGroup", "${TargetGroup.TargetGroupFullName}", "LoadBalancer", "${ALB.LoadBalancerFullName}"]],
                "region": "${AWS::Region}",
                "title": "Target 5XX Errors",
                "stat": "Sum",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [["AWS/ApplicationELB", "RequestCountPerTarget", "TargetGroup", "${TargetGroup.TargetGroupFullName}", "LoadBalancer", "${ALB.LoadBalancerFullName}"]],
                "region": "${AWS::Region}",
                "title": "Request Count Per Target",
                "stat": "Sum",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/ApplicationELB", "HealthyHostCount", "TargetGroup", "${TargetGroup.TargetGroupFullName}", "LoadBalancer", "${ALB.LoadBalancerFullName}"],
                  [".", "UnHealthyHostCount", ".", "${TargetGroup.TargetGroupFullName}", ".", "${ALB.LoadBalancerFullName}"]
                ],
                "region": "${AWS::Region}",
                "title": "Healthy vs Unhealthy Host Count",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 12,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [["AWS/Billing", "EstimatedCharges", "Currency", "GBP"]],
                "region": "${AWS::Region}",
                "title": "Estimated Charges (GBP)",
                "stat": "Maximum",
                "period": 86400
              }
            }
          ]
        }

Mappings:
  RegionMap:
    eu-west-2:
      DefaultVPC: vpc-02e2f5fac05fd5feb
      PublicSubnets:
        - subnet-06a95e62ddaae9f3f
        - subnet-0d35c539fb7ab9ffb
        - subnet-0122213af870d2c20

Outputs:
  ALBURL:
    Description: URL to access the FastAPI service
    Value: !Sub "http://${ALB.DNSName}"
