AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda + API Gateway for /songs route in hybrid architecture

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  DBSecretArn:
    Type: String
    Description: ARN of the RDS credentials stored in Secrets Manager
  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group allowing Lambda access to RDS

Resources:
  # EC2 Launch Template
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: ami-04b2ad6c50c72936b
        SecurityGroupIds:
          - !Ref SecurityGroupId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            amazon-linux-extras enable python3.8
            yum install -y python3.8 git amazon-cloudwatch-agent
            cd /home/ec2-user
            git clone -b hybrid-backend-dev https://github.com/MrGurijala/music-streaming-app.git
            cd music-streaming-app
            python3.8 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install gunicorn
            pip install -r backend/requirements.txt
            mkdir -p /var/log/fastapi
            venv/bin/gunicorn main:app \
              -w 2 \
              -k uvicorn.workers.UvicornWorker \
              --bind 0.0.0.0:8000 \
              --access-logfile /var/log/fastapi/access.log \
              --error-logfile /var/log/fastapi/error.log \
              --timeout 60 \
              --daemon

            # Write CloudWatch Agent config
            cat <<EOF > /opt/aws/amazon-cloudwatch-agent/bin/cloudwatch-config.json
            {
              "metrics": {
                "metrics_collected": {
                  "cpu": {
                    "measurement": ["cpu_usage_idle", "cpu_usage_iowait", "cpu_usage_user"],
                    "metrics_collection_interval": 60
                  },
                  "mem": {
                    "measurement": ["mem_used_percent"]
                  },
                  "disk": {
                    "measurement": ["used_percent"],
                    "resources": ["*"]
                  },
                  "swap": {
                    "measurement": ["swap_used_percent"]
                  }
                }
              }
            }
            EOF

            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config -m ec2 \
              -c file:/opt/aws/amazon-cloudwatch-agent/bin/cloudwatch-config.json -s

  ApplicationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: hybrid-app-target-group
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: instance
      HealthCheckPath: /

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: hybrid-app-alb
      Scheme: internet-facing
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ApplicationListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationTargetGroup

  EC2AllowPort8000FromALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupId # EC2's SG
      IpProtocol: tcp
      FromPort: 8000
      ToPort: 8000
      SourceSecurityGroupId: !Ref ALBSecurityGroup

  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      MinSize: "1"
      MaxSize: "4"
      DesiredCapacity: "1"
      TargetGroupARNs:
        - !Ref ApplicationTargetGroup

  SongsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SongsLambda
      Handler: main.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: hybrid-lambda-bucket
        S3Key: songs_lambda.zip
      Runtime: python3.8
      Architectures:
        - x86_64
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !Ref SubnetIds
      Environment:
        Variables:
          DB_SECRET_ARN: !Ref DBSecretArn

  AuthFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AuthLambda
      Handler: main.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: hybrid-lambda-bucket
        S3Key: auth_lambda.zip
      Runtime: python3.8
      Architectures:
        - x86_64
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !Ref SubnetIds
      Environment:
        Variables:
          DB_SECRET_ARN: !Ref DBSecretArn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaRDSAccessRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaRDSAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"

  SongsAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SongsAPI

  SongsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt SongsAPI.RootResourceId
      PathPart: songs
      RestApiId: !Ref SongsAPI

  SongsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !Ref SongsResource
      RestApiId: !Ref SongsAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SongsFunction.Arn}/invocations"

  AuthAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AuthAPI

  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt AuthAPI.RootResourceId
      PathPart: auth
      RestApiId: !Ref AuthAPI

  AuthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !Ref AuthResource
      RestApiId: !Ref AuthAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthFunction.Arn}/invocations"

  LambdaPermissionSongs:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SongsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SongsAPI}/*/*/songs"

  LambdaPermissionAuth:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AuthAPI}/*/*/auth"

  SongsApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref SongsAPI
      StageName: Prod
    DependsOn: SongsMethod

  AuthApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref AuthAPI
      StageName: Prod
    DependsOn: AuthMethod

  ## Lambda Function Monitoring (Songs & Auth APIs)
  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: HighLambdaDuration
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1000
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: Lambda duration > 1s
      Dimensions:
        - Name: FunctionName
          Value: songs-auth-handler

  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: LambdaErrorRate
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmDescription: Lambda errors detected
      Dimensions:
        - Name: FunctionName
          Value: songs-auth-handler

  ## ALB Performance Alarms
  TargetResponseTimeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: HighTargetResponseTime
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0.2
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: ALB target response time > 200ms
      Dimensions:
        - Name: TargetGroup
          Value: !Ref ApplicationTargetGroup

  Target5XXErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Target5XXErrors
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmDescription: ALB target returned 5XX errors
      Dimensions:
        - Name: TargetGroup
          Value: !Ref ApplicationTargetGroup

  ALBDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: hybrid-alb-monitoring-dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [["AWS/ApplicationELB", "TargetResponseTime", "TargetGroup", "${ApplicationTargetGroup}"]],
                "region": "${AWS::Region}",
                "stat": "Average",
                "title": "Target Response Time (Avg)"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [["AWS/ApplicationELB", "HTTPCode_Target_5XX_Count", "TargetGroup", "${ApplicationTargetGroup}"]],
                "region": "${AWS::Region}",
                "stat": "Sum",
                "title": "5XX Errors"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [["AWS/ApplicationELB", "RequestCountPerTarget", "TargetGroup", "${ApplicationTargetGroup}"]],
                "region": "${AWS::Region}",
                "stat": "Sum",
                "title": "Request Count Per Target"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/ApplicationELB", "HealthyHostCount", "TargetGroup", "${ApplicationTargetGroup}"],
                  [".", "UnHealthyHostCount", "TargetGroup", "${ApplicationTargetGroup}"]
                ],
                "region": "${AWS::Region}",
                "stat": "Average",
                "title": "Host Health (Healthy vs Unhealthy)"
              }
            }
          ]
        }

  LambdaDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: hybrid-lambda-performance-dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0, "y": 0, "width": 12, "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${SongsFunction}"],
                  ["AWS/Lambda", "Invocations", "FunctionName", "${AuthFunction}"]
                ],
                "region": "${AWS::Region}",
                "stat": "Sum",
                "title": "Lambda Invocations"
              }
            },
            {
              "type": "metric",
              "x": 12, "y": 0, "width": 12, "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${SongsFunction}"],
                  ["AWS/Lambda", "Duration", "FunctionName", "${AuthFunction}"]
                ],
                "region": "${AWS::Region}",
                "stat": "Average",
                "title": "Lambda Duration (Avg)"
              }
            },
            {
              "type": "metric",
              "x": 0, "y": 6, "width": 12, "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Throttles", "FunctionName", "${SongsFunction}"],
                  ["AWS/Lambda", "Throttles", "FunctionName", "${AuthFunction}"]
                ],
                "region": "${AWS::Region}",
                "stat": "Sum",
                "title": "Lambda Throttles"
              }
            },
            {
              "type": "metric",
              "x": 12, "y": 6, "width": 12, "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Errors", "FunctionName", "${SongsFunction}"],
                  ["AWS/Lambda", "Errors", "FunctionName", "${AuthFunction}"]
                ],
                "region": "${AWS::Region}",
                "stat": "Sum",
                "title": "Lambda Errors"
              }
            }
          ]
        }

  EC2Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: hybrid-ec2-performance-dashboard
      DashboardBody: |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0, "y": 0, "width": 12, "height": 6,
              "properties": {
                "metrics": [["CWAgent", "cpu_usage_user"]],
                "region": "${AWS::Region}",
                "stat": "Average",
                "title": "EC2 CPU Usage (User %)"
              }
            },
            {
              "type": "metric",
              "x": 12, "y": 0, "width": 12, "height": 6,
              "properties": {
                "metrics": [["CWAgent", "mem_used_percent"]],
                "region": "${AWS::Region}",
                "stat": "Average",
                "title": "EC2 Memory Usage (%)"
              }
            },
            {
              "type": "metric",
              "x": 0, "y": 6, "width": 12, "height": 6,
              "properties": {
                "metrics": [["CWAgent", "swap_used_percent"]],
                "region": "${AWS::Region}",
                "stat": "Average",
                "title": "EC2 Swap Usage (%)"
              }
            },
            {
              "type": "metric",
              "x": 12, "y": 6, "width": 12, "height": 6,
              "properties": {
                "metrics": [["CWAgent", "disk_used_percent"]],
                "region": "${AWS::Region}",
                "stat": "Average",
                "title": "EC2 Disk Usage (%)"
              }
            }
          ]
        }

Outputs:
  SongsApiUrl:
    Description: "API Gateway endpoint URL for /songs"
    Value: !Sub "https://${SongsAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/songs"

  AuthApiUrl:
    Description: "API Gateway endpoint URL for /auth"
    Value: !Sub "https://${AuthAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/auth"

  ALBEndpoint:
    Description: "Public DNS for the Application Load Balancer"
    Value: !GetAtt ApplicationLoadBalancer.DNSName
